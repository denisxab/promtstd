{
    "name": "Документирование кода.md",
    "meta": null,
    "doc": null,
    "base_promt": {
        "promt": {
            "text_promt": "Напиши докстригки к классам и к его методам. В ответ отправь только имя класса/метода и его докстринг, отправляй это ввиде код блока:\n\n{{КОД}}",
            "vars": [
                {
                    "name": "КОД",
                    "doc": null,
                    "default": null,
                    "allowed": null
                }
            ]
        }
    },
    "tools_promt": null,
    "expl": [
        {
            "name": "Пример документирования lib_main.py",
            "in_text": "\n```python\n\ndef parse_promt_code_block_template(text: str):\n    res = []\n    for m in RePromt.promt_code_block_template.finditer(text):\n        name = m[\"name\"].strip()\n        doc = m[\"doc\"]\n        allowed = RePromt.md_list.findall(m[\"defualts\"])\n        default = None\n        for n, i in enumerate(allowed):\n            q = i.strip()\n            if q and q.endswith(\"+\"):\n                n_q = q[:-1].strip()\n                allowed[n] = n_q\n                default = n_q\n                break\n\n        res.append(\n            PromtCodeBlockTemplates(\n                name=name,\n                doc=doc,\n                default=default,\n                defualts=allowed,\n            )\n        )\n    return res\n\n\ndef parse_meta(promt_group: str, promt_text: str) -> PromtMeta:\n    meta_raw = RePromt.meta_h1.search(promt_text)[\"meta_text\"].strip()\n    meta_obj = {\n        m[\"key\"]: RePromt.md_list.findall(m[\"values\"])\n        for m in RePromt.meta_parse_body.finditer(meta_raw)\n    }\n    meta = PromtMeta(\n        for_=meta_obj.get(\"for\", tuple()),\n        use=meta_obj.get(\"use\", tuple()),\n        group=promt_group,\n        tags=meta_obj.get(\"tags\", tuple()),\n    )\n    return meta\n\n\ndef parse_base_promt(promt_text: str) -> PromtBasePromt:\n    base_promt_raw = RePromt.base_promt_h1.search(promt_text)[\"base_promt_text\"].strip()\n    base_promt_obj = RePromt.promt_code_block.search(base_promt_raw)\n\n    promt_code_block_templates = (\n        parse_promt_code_block_template(base_promt_obj[\"templates\"])\n        if base_promt_obj[\"templates\"]\n        else []\n    )\n\n    base_promt = PromtBasePromt(\n        promt=PromtCodeBlock(\n            text_promt=base_promt_obj[\"code\"],\n            templates=promt_code_block_templates,\n        )\n    )\n\n    return base_promt\n\n\ndef parse_tools_promt(promt_text: str) -> PromtToolsPromt:\n    tools_promt_raw = RePromt.tools_promt_h1.search(promt_text)[\n        \"tools_promt_text\"\n    ].strip()\n    tools_promt = PromtToolsPromt(\n        promts=tuple(\n            PromtCodeBlock(\n                text_promt=m[\"code\"],\n                templates=parse_promt_code_block_template(m[\"templates\"])\n                if m[\"templates\"]\n                else [],\n            )\n            for m in RePromt.promt_code_block.finditer(tools_promt_raw)\n        )\n    )\n    return tools_promt\n\n\ndef parse_examples(promt_text: str) -> list[PromtExamples]:\n    examples_raw = RePromt.examples_promt_h1.search(promt_text)[\n        \"examples_promt_text\"\n    ].strip()\n    expl = []\n\n    for m in RePromt.examples_in_h2.finditer(examples_raw):\n        _name = m[\"name\"]\n        in_text = m[\"doc\"]\n        out_text = {}\n        for m2 in RePromt.examples_out_h3.finditer(m[\"out\"]):\n            out_text[m2[\"name\"]] = m2[\"body\"]\n\n        expl.append(\n            PromtExamples(\n                name=_name,\n                in_text=in_text,\n                out_text=out_text,\n            )\n        )\n\n    return expl\n\n\ndef parse_text_promt_md_to_json(\n    promt_name: str, promt_group: str, promt_text: str\n) -> PromtObj:\n    \"\"\"Распарсить весь Markdown файл с промтами\n    и вызвать для каждого промта функцию parse_header_md_to_obj\n\n    promt_name: Имя промта\n    promt_group: Имя к какой группе относиться этот промт\n    promt_text: Прмоты в Markdown формате\n    return: Промты в Json формате\n    \"\"\"\n\n    # Убрать комментарии из текста\n    promt_text = RePromt.clear_comments.sub(\"\", promt_text)\n\n    name = promt_name\n\n    # Парсинг мета-данных\n    meta = parse_meta(promt_group, promt_text)\n\n    # Парсинг основного промпта\n    base_promt = parse_base_promt(promt_text)\n\n    # Парсинг промптов инструментов\n    tools_promt = parse_tools_promt(promt_text)\n\n    # Парсинг примеров\n    examples = parse_examples(promt_text)\n\n    p = PromtObj(\n        name=name,\n        meta=meta,\n        doc=RePromt.doc_h1.search(promt_text)[\"doc_text\"].strip(),\n        base_promt=base_promt,\n        tools_promt=tools_promt,\n        expl=examples,\n    )\n\n    return JsonText(p)\n\n\ndef parse_file_promt_md_to_json(\n    path_to_file_promt: pathlib.Path, promt_text: str\n) -> JsonText:\n    \"\"\"\n    Распарсить MArkdown файл и конвертировать его в Json\n\n    :param path_to_file_promt: Путь к файлу\n    :param str promt_text: Текст\n    :return str: Json\n    \"\"\"\n    return parse_text_promt_md_to_json(\n        str(path_to_file_promt.name), str(path_to_file_promt.parent.name), promt_text\n    )\n\n```\n",
            "out_text": {
                "1": "\n```python\ndef parse_promt_code_block_template(text: str):\n    \"\"\"\n    Разбирает текстовую строку и создает объекты PromtCodeBlockTemplates.\n    :param text: Текстовая строка с шаблонами кода промпта.\n    :return: Список объектов PromtCodeBlockTemplates.\n    \"\"\"\n\ndef parse_meta(promt_group: str, promt_text: str) -> PromtMeta:\n    \"\"\"\n    Разбирает текстовую строку и создает объект PromtMeta с мета-данными о промпте.\n    :param promt_group: Группа промпта.\n    :param promt_text: Текстовая строка с мета-данными промпта.\n    :return: Объект PromtMeta.\n    \"\"\"\n\ndef parse_base_promt(promt_text: str) -> PromtBasePromt:\n    \"\"\"\n    Разбирает текстовую строку и создает объект PromtBasePromt с основным промптом.\n    :param promt_text: Текстовая строка с основным промптом.\n    :return: Объект PromtBasePromt.\n    \"\"\"\n\ndef parse_tools_promt(promt_text: str) -> PromtToolsPromt:\n    \"\"\"\n    Разбирает текстовую строку и создает объект PromtToolsPromt с промптами инструментов.\n    :param promt_text: Текстовая строка с промптами инструментов.\n    :return: Объект PromtToolsPromt.\n    \"\"\"\n\ndef parse_examples(promt_text: str) -> list[PromtExamples]:\n    \"\"\"\n    Разбирает текстовую строку и создает список объектов PromtExamples с примерами промпта.\n    :param promt_text: Текстовая строка с примерами промпта.\n    :return: Список объектов PromtExamples.\n    \"\"\"\n\ndef parse_text_promt_md_to_json(\n    promt_name: str, promt_group: str, promt_text: str\n) -> PromtObj:\n    \"\"\"\n    Разбирает текстовый файл Markdown с промптами и создает объект PromtObj.\n    :param promt_name: Имя промпта.\n    :param promt_group: Группа промпта.\n    :param promt_text: Текст промпта в формате Markdown.\n    :return: Объект PromtObj.\n    \"\"\"\n\ndef parse_file_promt_md_to_json(\n    path_to_file_promt: pathlib.Path, promt_text: str\n) -> JsonText:\n    \"\"\"\n    Разбирает файл Markdown и конвертирует его в формат JSON.\n    :param path_to_file_promt: Путь к файлу промпта.\n    :param promt_text: Текст промпта.\n    :return: Текст в формате JSON.\n    \"\"\"\n```"
            }
        }
    ]
}